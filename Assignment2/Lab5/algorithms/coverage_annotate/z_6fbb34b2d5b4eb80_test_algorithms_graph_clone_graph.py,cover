  # Test cases automatically generated by Pynguin (https://www.pynguin.eu).
  # Please check them before you use them.
! import pytest
! import algorithms.graph.clone_graph as module_0
! import collections as module_1
  
  
! def test_case_0():
!     bool_0 = False
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
!     var_0 = module_0.clone_graph1(undirected_graph_node_0)
!     assert (
!         f"{type(var_0).__module__}.{type(var_0).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_0.label is False
!     assert var_0.neighbors == []
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_1():
!     none_type_0 = None
!     var_0 = module_0.clone_graph1(none_type_0)
!     var_0.copy()
  
  
! def test_case_2():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = module_0.clone_graph2(undirected_graph_node_0)
!     assert (
!         f"{type(var_0).__module__}.{type(var_0).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_0.label is None
!     assert var_0.neighbors == []
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_3():
!     none_type_0 = None
!     var_0 = module_0.clone_graph(none_type_0)
!     var_1 = module_0.clone_graph1(var_0)
!     var_2 = module_0.clone_graph2(none_type_0)
!     var_3 = var_2.__repr__()
!     var_2.endswith(none_type_0, end=none_type_0)
  
  
! def test_case_4():
!     bool_0 = False
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
!     var_0 = undirected_graph_node_0.shallow_copy()
!     var_1 = module_0.clone_graph(undirected_graph_node_0)
!     assert (
!         f"{type(var_1).__module__}.{type(var_1).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_1.label is False
!     assert var_1.neighbors == []
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(var_1)
!     assert (
!         f"{type(undirected_graph_node_1.label).__module__}.{type(undirected_graph_node_1.label).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
  
  
! def test_case_5():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = undirected_graph_node_0.add_neighbor(none_type_0)
!     var_1 = module_0.clone_graph(none_type_0)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_6():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     none_type_1 = None
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(none_type_1)
!     var_0 = undirected_graph_node_1.shallow_copy()
!     var_1 = undirected_graph_node_1.add_neighbor(undirected_graph_node_1)
!     module_0.dfs(undirected_graph_node_1, none_type_1)
  
  
! def test_case_7():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_8():
!     none_type_0 = None
!     var_0 = module_0.clone_graph1(none_type_0)
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_1 = undirected_graph_node_0.shallow_copy()
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(none_type_0)
!     var_2 = undirected_graph_node_0.add_neighbor(none_type_0)
!     var_3 = undirected_graph_node_0.shallow_copy()
!     module_0.clone_graph2(undirected_graph_node_0)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_9():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = undirected_graph_node_0.shallow_copy()
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(none_type_0)
!     var_1 = undirected_graph_node_0.add_neighbor(var_0)
!     var_2 = var_1.__repr__()
!     var_3 = module_0.clone_graph2(undirected_graph_node_0)
!     assert (
!         f"{type(var_3).__module__}.{type(var_3).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_3.label is None
!     assert (
!         f"{type(var_3.neighbors).__module__}.{type(var_3.neighbors).__qualname__}"
!         == "builtins.list"
!     )
!     assert len(var_3.neighbors) == 1
!     var_4 = module_0.clone_graph1(none_type_0)
!     var_4.append(none_type_0)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_10():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
!     var_1 = undirected_graph_node_0.shallow_copy()
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(none_type_0)
!     var_2 = undirected_graph_node_0.add_neighbor(var_1)
!     var_3 = var_2.__repr__()
!     var_4 = undirected_graph_node_1.shallow_copy()
!     var_5 = module_0.clone_graph2(undirected_graph_node_0)
!     assert (
!         f"{type(var_5).__module__}.{type(var_5).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_5.label is None
!     assert (
!         f"{type(var_5.neighbors).__module__}.{type(var_5.neighbors).__qualname__}"
!         == "builtins.list"
!     )
!     assert len(var_5.neighbors) == 2
!     var_6 = module_0.clone_graph1(none_type_0)
!     var_6.append(none_type_0)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_11():
!     dict_0 = {}
!     none_type_0 = None
!     var_0 = module_0.clone_graph1(dict_0)
!     var_1 = module_0.clone_graph(none_type_0)
!     var_2 = module_0.clone_graph(none_type_0)
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(var_1)
!     var_3 = module_0.clone_graph2(dict_0)
!     var_4 = undirected_graph_node_0.add_neighbor(var_1)
!     module_0.clone_graph1(undirected_graph_node_0)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_12():
!     dict_0 = {}
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(undirected_graph_node_0)
!     var_0 = module_1._OrderedDictValuesView(undirected_graph_node_0)
!     var_1 = undirected_graph_node_1.add_neighbor(undirected_graph_node_1)
!     var_2 = module_0.clone_graph1(dict_0)
!     var_3 = module_0.clone_graph(var_2)
!     var_4 = module_0.clone_graph1(undirected_graph_node_1)
!     assert len(var_4.neighbors) == 1
!     undirected_graph_node_2 = module_0.UndirectedGraphNode(var_2)
!     undirected_graph_node_3 = module_0.UndirectedGraphNode(dict_0)
!     var_5 = module_0.dfs(undirected_graph_node_0, undirected_graph_node_0)
!     var_4.isascii()
  
  
! def test_case_13():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = undirected_graph_node_0.shallow_copy()
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(var_0)
!     var_1 = undirected_graph_node_1.shallow_copy()
!     var_2 = module_0.clone_graph2(var_0)
!     assert (
!         f"{type(var_2).__module__}.{type(var_2).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_2.label is None
!     assert var_2.neighbors == []
!     bool_0 = False
!     var_3 = module_0.clone_graph1(none_type_0)
!     undirected_graph_node_2 = module_0.UndirectedGraphNode(var_0)
!     undirected_graph_node_3 = module_0.UndirectedGraphNode(bool_0)
!     var_4 = module_0.dfs(undirected_graph_node_2, undirected_graph_node_0)
!     var_5 = undirected_graph_node_1.add_neighbor(var_1)
!     var_6 = module_0.clone_graph1(var_2)
!     assert (
!         f"{type(var_6).__module__}.{type(var_6).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_6.label is None
!     assert var_6.neighbors == []
!     var_7 = var_3.__ne__(var_0)
!     var_8 = var_7.__gt__(var_2)
!     var_9 = module_0.clone_graph(bool_0)
!     undirected_graph_node_4 = module_0.UndirectedGraphNode(var_8)
!     var_10 = var_2.add_neighbor(var_2)
!     assert (
!         f"{type(var_2.neighbors).__module__}.{type(var_2.neighbors).__qualname__}"
!         == "builtins.list"
!     )
!     assert len(var_2.neighbors) == 1
!     var_11 = module_0.clone_graph1(undirected_graph_node_1)
!     assert len(var_11.neighbors) == 1
!     var_12 = var_1.add_neighbor(var_11)
!     with pytest.raises(TypeError):
!         module_1.namedtuple(var_11, var_12)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_14():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = undirected_graph_node_0.shallow_copy()
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(var_0)
!     var_1 = undirected_graph_node_1.shallow_copy()
!     var_2 = module_0.clone_graph1(none_type_0)
!     undirected_graph_node_2 = module_0.UndirectedGraphNode(undirected_graph_node_1)
!     undirected_graph_node_3 = module_0.UndirectedGraphNode(none_type_0)
!     var_3 = module_0.dfs(var_1, none_type_0)
!     var_4 = undirected_graph_node_1.add_neighbor(none_type_0)
!     var_5 = module_0.clone_graph1(var_2)
!     var_6 = var_1.__gt__(var_5)
!     module_0.clone_graph(undirected_graph_node_1)
  
  
! @pytest.mark.xfail(strict=True)
! def test_case_15():
!     none_type_0 = None
!     undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
!     var_0 = undirected_graph_node_0.shallow_copy()
!     undirected_graph_node_1 = module_0.UndirectedGraphNode(var_0)
!     var_1 = undirected_graph_node_1.add_neighbor(undirected_graph_node_1)
!     var_2 = module_0.clone_graph2(var_0)
!     assert (
!         f"{type(var_2).__module__}.{type(var_2).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_2.label is None
!     assert var_2.neighbors == []
!     var_3 = module_0.clone_graph1(none_type_0)
!     undirected_graph_node_2 = module_0.UndirectedGraphNode(undirected_graph_node_1)
!     undirected_graph_node_3 = module_0.UndirectedGraphNode(none_type_0)
!     var_4 = module_0.dfs(undirected_graph_node_3, none_type_0)
!     var_5 = undirected_graph_node_1.add_neighbor(none_type_0)
!     var_6 = module_0.clone_graph1(var_2)
!     assert (
!         f"{type(var_6).__module__}.{type(var_6).__qualname__}"
!         == "algorithms.graph.clone_graph.UndirectedGraphNode"
!     )
!     assert var_6.label is None
!     assert var_6.neighbors == []
!     var_7 = var_4.__ne__(var_6)
!     var_8 = var_5.__gt__(var_6)
!     module_0.clone_graph(undirected_graph_node_1)
